# generated by datamodel-codegen:
#   filename:  geocoding_api_openapi.json
#   timestamp: 2023-12-10T16:21:07+00:00

from __future__ import annotations

from typing import Any, Dict, List

from pydantic import BaseModel, Field


class Info(BaseModel):
    title: str
    version: str
    description: str


class Name(BaseModel):
    type: str


class Az(BaseModel):
    type: str


class Uk(BaseModel):
    type: str


class Vi(BaseModel):
    type: str


class Ga(BaseModel):
    type: str


class Nn(BaseModel):
    type: str


class Ht(BaseModel):
    type: str


class Su(BaseModel):
    type: str


class Et(BaseModel):
    type: str


class Es(BaseModel):
    type: str


class No(BaseModel):
    type: str


class Cs(BaseModel):
    type: str


class Mi(BaseModel):
    type: str


class Is(BaseModel):
    type: str


class Tg(BaseModel):
    type: str


class La(BaseModel):
    type: str


class Ia(BaseModel):
    type: str


class Bn(BaseModel):
    type: str


class Hi(BaseModel):
    type: str


class Pt(BaseModel):
    type: str


class Na(BaseModel):
    type: str


class Yi(BaseModel):
    type: str


class Am(BaseModel):
    type: str


class Li(BaseModel):
    type: str


class Sw(BaseModel):
    type: str


class Eo(BaseModel):
    type: str


class Be(BaseModel):
    type: str


class Cy(BaseModel):
    type: str


class Ne(BaseModel):
    type: str


class Gn(BaseModel):
    type: str


class Fo(BaseModel):
    type: str


class Os(BaseModel):
    type: str


class Bo(BaseModel):
    type: str


class Tt(BaseModel):
    type: str


class Ku(BaseModel):
    type: str


class Nl(BaseModel):
    type: str


class De(BaseModel):
    type: str


class Mg(BaseModel):
    type: str


class Sc(BaseModel):
    type: str


class Ru(BaseModel):
    type: str


class Vo(BaseModel):
    type: str


class Ur(BaseModel):
    type: str


class Gv(BaseModel):
    type: str


class Te(BaseModel):
    type: str


class Hr(BaseModel):
    type: str


class Sa(BaseModel):
    type: str


class Sq(BaseModel):
    type: str


class Rn(BaseModel):
    type: str


class Rm(BaseModel):
    type: str


class Bi(BaseModel):
    type: str


class Io(BaseModel):
    type: str


class Bs(BaseModel):
    type: str


class Kk(BaseModel):
    type: str


class Id(BaseModel):
    type: str


class Yo(BaseModel):
    type: str


class Ug(BaseModel):
    type: str


class Hy(BaseModel):
    type: str


class Tr(BaseModel):
    type: str


class Ay(BaseModel):
    type: str


class Lb(BaseModel):
    type: str


class Cu(BaseModel):
    type: str


class Lt(BaseModel):
    type: str


class Fa(BaseModel):
    type: str


class Uz(BaseModel):
    type: str


class Fr(BaseModel):
    type: str


class Ks(BaseModel):
    type: str


class Fy(BaseModel):
    type: str


class Mr(BaseModel):
    type: str


class Ka(BaseModel):
    type: str


class Lv(BaseModel):
    type: str


class Sr(BaseModel):
    type: str


class He(BaseModel):
    type: str


class Ca(BaseModel):
    type: str


class It(BaseModel):
    type: str


class Ba(BaseModel):
    type: str


class Pl(BaseModel):
    type: str


class Ln(BaseModel):
    type: str


class Kl(BaseModel):
    type: str


class Co(BaseModel):
    type: str


class Mt(BaseModel):
    type: str


class Jv(BaseModel):
    type: str


class Tl(BaseModel):
    type: str


class Sk(BaseModel):
    type: str


class Ja(BaseModel):
    type: str


class Rw(BaseModel):
    type: str


class Sg(BaseModel):
    type: str


class Ty(BaseModel):
    type: str


class Sd(BaseModel):
    type: str


class En(BaseModel):
    type: str


class Eu(BaseModel):
    type: str


class Gd(BaseModel):
    type: str


class Ml(BaseModel):
    type: str


class Sv(BaseModel):
    type: str


class Th(BaseModel):
    type: str


class Ee(BaseModel):
    type: str


class Da(BaseModel):
    type: str


class Zh(BaseModel):
    type: str


class My(BaseModel):
    type: str


class Qu(BaseModel):
    type: str


class Br(BaseModel):
    type: str


class Sh(BaseModel):
    type: str


class Oc(BaseModel):
    type: str


class Hu(BaseModel):
    type: str


class Tk(BaseModel):
    type: str


class Ta(BaseModel):
    type: str


class El(BaseModel):
    type: str


class Se(BaseModel):
    type: str


class Fi(BaseModel):
    type: str


class Kn(BaseModel):
    type: str


class Ar(BaseModel):
    type: str


class Kv(BaseModel):
    type: str


class Cr(BaseModel):
    type: str


class Cv(BaseModel):
    type: str


class An(BaseModel):
    type: str


class Mk(BaseModel):
    type: str


class Ko(BaseModel):
    type: str


class Si(BaseModel):
    type: str


class Bg(BaseModel):
    type: str


class Ie(BaseModel):
    type: str


class So(BaseModel):
    type: str


class Gl(BaseModel):
    type: str


class Af(BaseModel):
    type: str


class Mn(BaseModel):
    type: str


class Sl(BaseModel):
    type: str


class Ro(BaseModel):
    type: str


class Properties1(BaseModel):
    az: Az
    uk: Uk
    vi: Vi
    ga: Ga
    nn: Nn
    ht: Ht
    su: Su
    et: Et
    es: Es
    no: No
    cs: Cs
    mi: Mi
    is_: Is = Field(..., alias='is')
    tg: Tg
    la: La
    ia: Ia
    bn: Bn
    hi: Hi
    pt: Pt
    na: Na
    yi: Yi
    am: Am
    li: Li
    sw: Sw
    eo: Eo
    be: Be
    cy: Cy
    ne: Ne
    gn: Gn
    fo: Fo
    os: Os
    bo: Bo
    tt: Tt
    ku: Ku
    nl: Nl
    de: De
    mg: Mg
    sc: Sc
    ru: Ru
    vo: Vo
    ur: Ur
    gv: Gv
    te: Te
    hr: Hr
    sa: Sa
    sq: Sq
    rn: Rn
    rm: Rm
    bi: Bi
    io: Io
    bs: Bs
    kk: Kk
    id: Id
    yo: Yo
    ug: Ug
    hy: Hy
    tr: Tr
    ay: Ay
    lb: Lb
    cu: Cu
    lt: Lt
    fa: Fa
    uz: Uz
    fr: Fr
    ks: Ks
    fy: Fy
    mr: Mr
    ka: Ka
    lv: Lv
    sr: Sr
    he: He
    ca: Ca
    it: It
    ba: Ba
    pl: Pl
    ln: Ln
    kl: Kl
    co: Co
    mt: Mt
    jv: Jv
    tl: Tl
    sk: Sk
    ja: Ja
    rw: Rw
    sg: Sg
    ty: Ty
    sd: Sd
    en: En
    eu: Eu
    gd: Gd
    ml: Ml
    sv: Sv
    th: Th
    ee: Ee
    da: Da
    zh: Zh
    my: My
    qu: Qu
    br: Br
    sh: Sh
    oc: Oc
    hu: Hu
    tk: Tk
    ta: Ta
    el: El
    se: Se
    fi: Fi
    kn: Kn
    ar: Ar
    kv: Kv
    cr: Cr
    cv: Cv
    an: An
    mk: Mk
    ko: Ko
    si: Si
    bg: Bg
    ie: Ie
    so: So
    gl: Gl
    af: Af
    mn: Mn
    sl: Sl
    ro: Ro


class LocalNames(BaseModel):
    type: str
    properties: Properties1
    required: List[str]


class Lat(BaseModel):
    type: str


class Lon(BaseModel):
    type: str


class Country(BaseModel):
    type: str


class State(BaseModel):
    type: str


class Properties(BaseModel):
    name: Name
    local_names: LocalNames
    lat: Lat
    lon: Lon
    country: Country
    state: State


class Items(BaseModel):
    type: str
    properties: Properties
    required: List[str]


class Schema(BaseModel):
    type: str
    items: Items


class LocalNames1(BaseModel):
    az: str
    uk: str
    vi: str
    ga: str
    nn: str
    ht: str
    su: str
    et: str
    es: str
    no: str
    cs: str
    mi: str
    is_: str = Field(..., alias='is')
    tg: str
    la: str
    ia: str
    bn: str
    hi: str
    pt: str
    na: str
    yi: str
    am: str
    li: str
    sw: str
    eo: str
    be: str
    cy: str
    ne: str
    gn: str
    fo: str
    os: str
    bo: str
    tt: str
    ku: str
    nl: str
    de: str
    mg: str
    sc: str
    ru: str
    vo: str
    ur: str
    gv: str
    te: str
    hr: str
    sa: str
    sq: str
    rn: str
    rm: str
    bi: str
    io: str
    bs: str
    kk: str
    id: str
    yo: str
    ug: str
    hy: str
    tr: str
    ay: str
    lb: str
    cu: str
    lt: str
    fa: str
    uz: str
    fr: str
    ks: str
    fy: str
    mr: str
    ka: str
    lv: str
    sr: str
    he: str
    ca: str
    it: str
    ba: str
    pl: str
    ln: str
    kl: str
    co: str
    mt: str
    jv: str
    tl: str
    sk: str
    ja: str
    rw: str
    sg: str
    ty: str
    sd: str
    en: str
    eu: str
    gd: str
    ml: str
    sv: str
    th: str
    ee: str
    da: str
    zh: str
    my: str
    qu: str
    br: str
    sh: str
    oc: str
    hu: str
    tk: str
    ta: str
    el: str
    se: str
    fi: str
    kn: str
    ar: str
    kv: str
    cr: str
    cv: str
    an: str
    mk: str
    ko: str
    si: str
    bg: str
    ie: str
    so: str
    gl: str
    af: str
    mn: str
    sl: str
    ro: str


class ExampleItem(BaseModel):
    name: str
    local_names: LocalNames1
    lat: float
    lon: float
    country: str
    state: str


class ApplicationJson(BaseModel):
    schema_: Schema = Field(..., alias='schema')
    example: List[ExampleItem]


class Content(BaseModel):
    application_json: ApplicationJson = Field(..., alias='application/json')


class Schema1(BaseModel):
    type: str


class XCacheKey(BaseModel):
    required: bool
    schema_: Schema1 = Field(..., alias='schema')


class Headers(BaseModel):
    X_Cache_Key: XCacheKey = Field(..., alias='X-Cache-Key')


class Field200(BaseModel):
    content: Content
    description: str
    headers: Headers


class Responses(BaseModel):
    field_200: Field200 = Field(..., alias='200')


class Parameter(BaseModel):
    name: str
    in_: str = Field(..., alias='in')
    required: bool
    schema_: Schema1 = Field(..., alias='schema')


class Get(BaseModel):
    summary: str
    description: str
    responses: Responses
    security: List
    parameters: List[Parameter]


class FieldGeo10Direct(BaseModel):
    get: Get


class Paths(BaseModel):
    field_geo_1_0_direct: FieldGeo10Direct = Field(..., alias='/geo/1.0/direct')


class GeoCodingAPILocation(BaseModel):
    openapi: str
    info: Info
    paths: Paths
    components: Dict[str, Any]
