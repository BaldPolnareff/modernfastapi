# generated by datamodel-codegen:
#   filename:  free_weather_api_openapi.json
#   timestamp: 2023-12-10T16:25:49+00:00

from __future__ import annotations

from typing import Any, Dict, List

from pydantic import BaseModel, Field


class Info(BaseModel):
    title: str
    version: str
    description: str


class Lon(BaseModel):
    type: str


class Lat(BaseModel):
    type: str


class Properties1(BaseModel):
    lon: Lon
    lat: Lat


class Coord(BaseModel):
    type: str
    properties: Properties1
    required: List[str]


class Id(BaseModel):
    type: str


class Main(BaseModel):
    type: str


class Description(BaseModel):
    type: str


class Icon(BaseModel):
    type: str


class Properties2(BaseModel):
    id: Id
    main: Main
    description: Description
    icon: Icon


class Items(BaseModel):
    type: str
    properties: Properties2
    required: List[str]


class Weather(BaseModel):
    type: str
    items: Items


class Base(BaseModel):
    type: str


class Temp(BaseModel):
    type: str


class FeelsLike(BaseModel):
    type: str


class TempMin(BaseModel):
    type: str


class TempMax(BaseModel):
    type: str


class Pressure(BaseModel):
    type: str


class Humidity(BaseModel):
    type: str


class Properties3(BaseModel):
    temp: Temp
    feels_like: FeelsLike
    temp_min: TempMin
    temp_max: TempMax
    pressure: Pressure
    humidity: Humidity


class Main1(BaseModel):
    type: str
    properties: Properties3
    required: List[str]


class Visibility(BaseModel):
    type: str


class Speed(BaseModel):
    type: str


class Deg(BaseModel):
    type: str


class Gust(BaseModel):
    type: str


class Properties4(BaseModel):
    speed: Speed
    deg: Deg
    gust: Gust


class Wind(BaseModel):
    type: str
    properties: Properties4
    required: List[str]


class All(BaseModel):
    type: str


class Properties5(BaseModel):
    all: All


class Clouds(BaseModel):
    type: str
    properties: Properties5
    required: List[str]


class Dt(BaseModel):
    type: str


class Type(BaseModel):
    type: str


class Country(BaseModel):
    type: str


class Sunrise(BaseModel):
    type: str


class Sunset(BaseModel):
    type: str


class Properties6(BaseModel):
    type: Type
    id: Id
    country: Country
    sunrise: Sunrise
    sunset: Sunset


class Sys(BaseModel):
    type: str
    properties: Properties6
    required: List[str]


class Timezone(BaseModel):
    type: str


class Name(BaseModel):
    type: str


class Cod(BaseModel):
    type: str


class Properties(BaseModel):
    coord: Coord
    weather: Weather
    base: Base
    main: Main1
    visibility: Visibility
    wind: Wind
    clouds: Clouds
    dt: Dt
    sys: Sys
    timezone: Timezone
    id: Id
    name: Name
    cod: Cod


class Schema(BaseModel):
    type: str
    properties: Properties
    required: List[str]


class Coord1(BaseModel):
    lon: float
    lat: float


class WeatherItem(BaseModel):
    id: int
    main: str
    description: str
    icon: str


class Main2(BaseModel):
    temp: float
    feels_like: float
    temp_min: float
    temp_max: float
    pressure: int
    humidity: int


class Wind1(BaseModel):
    speed: float
    deg: int
    gust: float


class Clouds1(BaseModel):
    all: int


class Sys1(BaseModel):
    type: int
    id: int
    country: str
    sunrise: int
    sunset: int


class Example(BaseModel):
    coord: Coord1
    weather: List[WeatherItem]
    base: str
    main: Main2
    visibility: int
    wind: Wind1
    clouds: Clouds1
    dt: int
    sys: Sys1
    timezone: int
    id: int
    name: str
    cod: int


class ApplicationJson(BaseModel):
    schema_: Schema = Field(..., alias='schema')
    example: Example


class Content(BaseModel):
    application_json: ApplicationJson = Field(..., alias='application/json')


class Schema1(BaseModel):
    type: str


class XCacheKey(BaseModel):
    required: bool
    schema_: Schema1 = Field(..., alias='schema')


class Headers(BaseModel):
    X_Cache_Key: XCacheKey = Field(..., alias='X-Cache-Key')


class Field200(BaseModel):
    content: Content
    description: str
    headers: Headers


class Responses(BaseModel):
    field_200: Field200 = Field(..., alias='200')


class Parameter(BaseModel):
    name: str
    in_: str = Field(..., alias='in')
    required: bool
    schema_: Schema1 = Field(..., alias='schema')


class Get(BaseModel):
    summary: str
    description: str
    responses: Responses
    security: List
    parameters: List[Parameter]


class FieldData25Weather(BaseModel):
    get: Get


class Paths(BaseModel):
    field_data_2_5_weather: FieldData25Weather = Field(..., alias='/data/2.5/weather')


class WeatherModel(BaseModel):
    openapi: str
    info: Info
    paths: Paths
    components: Dict[str, Any]
